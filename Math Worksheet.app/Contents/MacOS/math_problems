#! /usr/bin/env python
# -*- coding: utf-8

import os, sys
from random import randint
from random import choice
from random import sample
from random import shuffle
from textwrap import wrap
from datetime import date
import calendar
import math
import subprocess
import time as monthdayyear

# GLOBALS
num_problems = 20        # How many problems? Currently multiples of num_per_line
num_per_line = 5         # How many problems per line?
high_number = 30         # Highest random number to use in problems
low_number = 0           # Lowest random number to use
problem_width = 15       # Width in chars of each problem
num_conversions = 2      # Number of conversion questions
num_codes = 1            # Number of coded messages to decode
atypes = ["+", "-", "x"] # Full set is ["+", "-", "x", "÷"]
max_word_length = 30     # Vocab word max length
vocab_words = [
                ('hello', 'common american greeting'),
                ('shillelagh', 'father could whip a dozen men'),
                ('locomo', 'longish word for train')
              ]

# Derived globals
day_of_week = calendar.day_name[date.today().weekday()]
page_width = problem_width * num_per_line
num_rows = int(math.ceil((num_problems/num_per_line)))
math_file = "/tmp/math_file.txt"

def get_n1(low,high):
    return str(randint(low,high))

def get_n2(low,high):
    return str(randint(low,high))

def get_sign():
    #return choice(["+", "-", "x", "÷"])
    return choice(atypes)

def gen_word_list(words,difficulty = "Monday"):
    new_word_list = []
    perc = { "Monday"     : 0.40,
             "Tuesday"    : 0.55,
             "Wednesday"  : 0.70,
             "Thursday"   : 0.85,
             "Friday"     : 1.00 }

    for word_tuple in words:
        lword = list(word_tuple[0])
        num_chars = int(len(lword) * perc[difficulty])
        for index in sample(range(len(lword)), num_chars):
            lword[index] = "_ "
        blank_word = " ".join(lword)
        new_word = blank_word + (" " * (max_word_length - len(blank_word)))
        new_word_list.append("%s%s\n" % (new_word, word_tuple[1]))

    if difficulty != "Monday":
        shuffle(new_word_list)

    return new_word_list
        


def do_math(n1,n2,sign):
    if sign == "+":
        return n1 + n2
    elif sign == "-":
        return n1 - n2
    elif sign == "x":
        return n1 * n2
    elif sign == "÷":
        return n1 / n2
    else:
        return "NaN"

def arithmetic(all_lines = []):
    all_lines.append("Arithmetic:\n")
    problem = 1
    # Generate problem list
    problems = [ {} ]
    for p in range(num_problems):
        n1 = get_n1(low_number,high_number)
        n2 = get_n2(low_number,high_number)
        if int(n2) > int(n1):
            n1,n2 = n2,n1
        sign = get_sign()
        # Solve the problem so we can make an answer key at the bottom.
        answer = str(do_math(int(n1),int(n2),sign))
        problems.append({ "number": str(p + 1), "n1": n1, "n2": n2, "sign": sign, "answer": answer })

    # Print problems out to screen
    for line in range(num_rows):
        rownum = num_rows + 1
        lineone = ""
        linetwo = ""
        lineequal = ""
        lineanswer = ""
        for p in range(num_per_line):
            dict_prob = problems[problem]
            # Problem number and first number on this line
            lineone += (str(problem) + ")" + ( " " * (4 - len(dict_prob["n1"])))  + dict_prob["n1"]).rjust(problem_width)
            # Sign and second number
            linetwo += (dict_prob["sign"] + (" " * (4 - len(dict_prob["n2"]))) + dict_prob["n2"]).rjust(problem_width)
            lineequal += " " * (problem_width - 5) + "‾‾‾‾‾"
            lineanswer += " " * (problem_width - 5) + "     "
            problem += 1
        all_lines.append(lineone)
        all_lines.append(linetwo)
        all_lines.append(lineequal)
        all_lines.append(lineanswer)
        all_lines.append("")

    # Generate answer key
    answerkey = "Answer Key: "
    for problem in problems:
        if problem:
            answerkey += "(" + problem["number"] + ", " + problem["answer"] + ") "
    all_lines.append('_' * page_width)
    all_lines.append(wrap(answerkey,page_width))
    all_lines.append("")
    return all_lines

# Generates a one-liner conversion.  Takes (units|time) and a grade level for args
# Grade levels determine how hard the conversions should be.
# Ex. converts("time",3)
#     "How many <minutes> are in <45> <seconds>? __________ <m>"
def converts(ctype = "",grade = "2"):
    if ctype == "":
        ctype = choice(["time","units"])

    if ctype == "time":
        # Randomly pick two units to choose between.  Ironically, there are currently only two.
        time_pair = sample([ "minutes", "seconds" ], 2)
        minutes = randint(1,3)
        if time_pair[0] == "minutes":
            time_amt = ((minutes * 60) + randint(0,60),minutes)
        elif time_pair[0] == "seconds":
            time_amt = (minutes,(minutes * 60) + randint(0,60))
        conversion_data = (time_pair[1],time_amt[1],time_pair[0],"_" * 5,time_pair[1][0:3]+".")
    elif ctype == "units":
        unit_pair = sample([ "feet", "inches" ], 2)
        feet = randint(1,5)
        if unit_pair[0] == "feet":
            unit_amt = ((feet * 12) + randint(0,12), feet)
        elif unit_pair[0] == "inches":
            unit_amt = (feet, (feet * 12) + randint(0,12))
        conversion_data = (unit_pair[1],unit_amt[1],unit_pair[0],"_" * 5,unit_pair[1][0:2]+".")
    return "    How many %s are in %s %s? %s %s\n" % conversion_data

def conversion(num = 5, all_lines = []):
    # Generate conversion questions
    all_lines.append("Conversions:\n")
    for line in range(num):
        all_lines.append(converts())
    return all_lines

def random_line(afile):
    lines = open(afile).read().splitlines()
    return choice(lines)

def coded_joke(sentence = "",all_lines = []):
    all_lines.append("Code: (The letter After)\n")
    alphabet=[ "a", "b", "c", "d", "e", 
                "f", "g", "h", "i", "j", 
                "k", "l", "m", "n", "o", 
                "p", "q", "r", "s", "t", 
                "u", "v", "w", "x", "y", "z" ]
    #shuffle(alphabet) # Use this for a different order every time
    # A reminder of which letter follows what ;)
    all_lines.append("(" + " ".join(alphabet).upper()+")\n")
    #sentence="Hello, how are you?"
    if not sentence:
        sentence = random_line(os.path.dirname(os.path.realpath(__file__))+"/../Resources/jokes.txt")
    coded_sentence=""
    i = 0
    while i < len(sentence):
        old_letter = sentence[i:i+1]
        i+=1
        if any(old_letter.lower() in s for s in alphabet):
            lindex = alphabet.index(old_letter.lower()) - 1
            if lindex == -1:
                lindex == 25
            if old_letter.istitle():
                coded_sentence += alphabet[lindex].upper()
            else:
                coded_sentence += alphabet[lindex]
        else:
            coded_sentence += old_letter
    all_lines.append(coded_sentence)
    all_lines.append(["",""])
    return all_lines


def main():
    all_lines = []
    name = "Name:" + "_" * 15
    date = str(monthdayyear.strftime("%m/%d/%Y"))
    justname = date + (" " * (page_width - len(name) - len(date))) + name + "\n"
    all_lines.append(justname)

    all_lines += arithmetic()
    all_lines.append("-" * page_width + "\n")
    all_lines += conversion(num_conversions)
    all_lines += coded_joke()
    all_lines += gen_word_list(vocab_words, difficulty = day_of_week)

    # Print out lines
    f = open(math_file, 'w')
    for l in all_lines:
        if type(l) is list:
            for li in l:
                print li
                f.write(li + "\n")
        else:
            print l
            f.write(l + "\n")
    f.close()
    #subprocess.call(["open", "-a", "/Applications/OpenOffice.app", math_file])

if __name__ == "__main__":
    main()
